Classfile /home/shade/IdeaProjects/TestDynamic/out/artifacts/mul/mul-obf/dynamic/testDynamic.class
  Last modified May 5, 2020; size 1269 bytes
  SHA-256 checksum 7a58b9bf76c43afb72473f053edd233f686dde60c460447a2d538c7854086898
public class dynamic.testDynamic
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #8                          // dynamic/testDynamic
  super_class: #10                        // java/lang/Object
  interfaces: 0, fields: 0, methods: 2, attributes: 0
Constant pool:
   #1 = String             #53            // Do you want to multiply [1] or add [2] two numbers? \n[1] Multiply\n[2] Add
   #2 = String             #54            // First number:
   #3 = String             #57            // Second number:
   #4 = String             #59            // The result is:
   #5 = String             #79            // want to go again? \n[y] yes\n[n] no
   #6 = String             #80            // y
   #7 = Class              #60            // "[Ljava/lang/String;"
   #8 = Class              #62            // dynamic/testDynamic
   #9 = Class              #67            // java/io/PrintStream
  #10 = Class              #68            // java/lang/Object
  #11 = Class              #69            // java/lang/String
  #12 = Class              #70            // java/lang/StringBuilder
  #13 = Class              #71            // java/lang/System
  #14 = Class              #72            // java/util/Scanner
  #15 = Fieldref           #13.#35        // java/lang/System.in:Ljava/io/InputStream;
  #16 = Fieldref           #13.#38        // java/lang/System.out:Ljava/io/PrintStream;
  #17 = Methodref          #9.#39         // java/io/PrintStream.println:(Ljava/lang/String;)V
  #18 = Methodref          #10.#28        // java/lang/Object."<init>":()V
  #19 = Methodref          #11.#32        // java/lang/String.equals:(Ljava/lang/Object;)Z
  #20 = Methodref          #11.#34        // java/lang/String.hashCode:()I
  #21 = Methodref          #12.#30        // java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
  #22 = Methodref          #12.#31        // java/lang/StringBuilder.append:(D)Ljava/lang/StringBuilder;
  #23 = Methodref          #12.#40        // java/lang/StringBuilder.toString:()Ljava/lang/String;
  #24 = Methodref          #14.#29        // java/util/Scanner."<init>":(Ljava/io/InputStream;)V
  #25 = Methodref          #14.#33        // java/util/Scanner.hasNext:()Z
  #26 = Methodref          #14.#36        // java/util/Scanner.next:()Ljava/lang/String;
  #27 = Methodref          #14.#37        // java/util/Scanner.nextDouble:()D
  #28 = NameAndType        #51:#44        // "<init>":()V
  #29 = NameAndType        #51:#47        // "<init>":(Ljava/io/InputStream;)V
  #30 = NameAndType        #51:#49        // "<init>":(Ljava/lang/String;)V
  #31 = NameAndType        #61:#46        // append:(D)Ljava/lang/StringBuilder;
  #32 = NameAndType        #63:#48        // equals:(Ljava/lang/Object;)Z
  #33 = NameAndType        #64:#45        // hasNext:()Z
  #34 = NameAndType        #65:#42        // hashCode:()I
  #35 = NameAndType        #66:#55        // in:Ljava/io/InputStream;
  #36 = NameAndType        #74:#43        // next:()Ljava/lang/String;
  #37 = NameAndType        #75:#41        // nextDouble:()D
  #38 = NameAndType        #76:#56        // out:Ljava/io/PrintStream;
  #39 = NameAndType        #77:#49        // println:(Ljava/lang/String;)V
  #40 = NameAndType        #78:#43        // toString:()Ljava/lang/String;
  #41 = Utf8               ()D
  #42 = Utf8               ()I
  #43 = Utf8               ()Ljava/lang/String;
  #44 = Utf8               ()V
  #45 = Utf8               ()Z
  #46 = Utf8               (D)Ljava/lang/StringBuilder;
  #47 = Utf8               (Ljava/io/InputStream;)V
  #48 = Utf8               (Ljava/lang/Object;)Z
  #49 = Utf8               (Ljava/lang/String;)V
  #50 = Utf8               ([Ljava/lang/String;)V
  #51 = Utf8               <init>
  #52 = Utf8               Code
  #53 = Utf8               Do you want to multiply [1] or add [2] two numbers? \n[1] Multiply\n[2] Add
  #54 = Utf8               First number:
  #55 = Utf8               Ljava/io/InputStream;
  #56 = Utf8               Ljava/io/PrintStream;
  #57 = Utf8               Second number:
  #58 = Utf8               StackMapTable
  #59 = Utf8               The result is:
  #60 = Utf8               [Ljava/lang/String;
  #61 = Utf8               append
  #62 = Utf8               dynamic/testDynamic
  #63 = Utf8               equals
  #64 = Utf8               hasNext
  #65 = Utf8               hashCode
  #66 = Utf8               in
  #67 = Utf8               java/io/PrintStream
  #68 = Utf8               java/lang/Object
  #69 = Utf8               java/lang/String
  #70 = Utf8               java/lang/StringBuilder
  #71 = Utf8               java/lang/System
  #72 = Utf8               java/util/Scanner
  #73 = Utf8               main
  #74 = Utf8               next
  #75 = Utf8               nextDouble
  #76 = Utf8               out
  #77 = Utf8               println
  #78 = Utf8               toString
  #79 = Utf8               want to go again? \n[y] yes\n[n] no
  #80 = Utf8               y
{
  public dynamic.testDynamic();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #18                 // Method java/lang/Object."<init>":()V
         4: return

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=4, locals=17, args_size=1
         0: iconst_1
         1: istore_0
         2: iload_0
         3: ifeq          224
         6: getstatic     #16                 // Field java/lang/System.out:Ljava/io/PrintStream;
         9: ldc           #1                  // String Do you want to multiply [1] or add [2] two numbers? \n[1] Multiply\n[2] Add
        11: invokevirtual #17                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        14: new           #14                 // class java/util/Scanner
        17: dup
        18: getstatic     #15                 // Field java/lang/System.in:Ljava/io/InputStream;
        21: invokespecial #24                 // Method java/util/Scanner."<init>":(Ljava/io/InputStream;)V
        24: astore_1
        25: dconst_0
        26: dstore_3
        27: dconst_0
        28: dstore        5
        30: dconst_0
        31: dstore        7
        33: aload_1
        34: invokevirtual #25                 // Method java/util/Scanner.hasNext:()Z
        37: ifeq          45
        40: aload_1
        41: invokevirtual #27                 // Method java/util/Scanner.nextDouble:()D
        44: dstore_3
        45: getstatic     #16                 // Field java/lang/System.out:Ljava/io/PrintStream;
        48: ldc           #2                  // String First number:
        50: invokevirtual #17                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        53: aload_1
        54: invokevirtual #25                 // Method java/util/Scanner.hasNext:()Z
        57: ifeq          66
        60: aload_1
        61: invokevirtual #27                 // Method java/util/Scanner.nextDouble:()D
        64: dstore        5
        66: getstatic     #16                 // Field java/lang/System.out:Ljava/io/PrintStream;
        69: ldc           #3                  // String Second number:
        71: invokevirtual #17                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        74: aload_1
        75: invokevirtual #25                 // Method java/util/Scanner.hasNext:()Z
        78: ifeq          87
        81: aload_1
        82: invokevirtual #27                 // Method java/util/Scanner.nextDouble:()D
        85: dstore        7
        87: dload_3
        88: dconst_1
        89: dcmpl
        90: ifne          110
        93: dload         5
        95: dload         7
        97: dstore        15
        99: dup2
       100: dstore        13
       102: dload         15
       104: dmul
       105: dstore        9
       107: goto          124
       110: dload         5
       112: dload         7
       114: dstore        15
       116: dup2
       117: dstore        13
       119: dload         15
       121: dadd
       122: dstore        9
       124: getstatic     #16                 // Field java/lang/System.out:Ljava/io/PrintStream;
       127: new           #12                 // class java/lang/StringBuilder
       130: dup
       131: ldc           #4                  // String The result is:
       133: invokespecial #21                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
       136: dload         9
       138: invokevirtual #22                 // Method java/lang/StringBuilder.append:(D)Ljava/lang/StringBuilder;
       141: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
       144: invokevirtual #17                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
       147: getstatic     #16                 // Field java/lang/System.out:Ljava/io/PrintStream;
       150: ldc           #5                  // String want to go again? \n[y] yes\n[n] no
       152: invokevirtual #17                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
       155: aload_1
       156: invokevirtual #26                 // Method java/util/Scanner.next:()Ljava/lang/String;
       159: astore_1
       160: iconst_m1
       161: istore_2
       162: aload_1
       163: invokevirtual #20                 // Method java/lang/String.hashCode:()I
       166: lookupswitch  { // 1
                     121: 184
                 default: 195
            }
       184: aload_1
       185: ldc           #6                  // String y
       187: invokevirtual #19                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       190: ifeq          195
       193: iconst_0
       194: istore_2
       195: iload_2
       196: lookupswitch  { // 1
                       0: 216
                 default: 219
            }
       216: goto          2
       219: iconst_0
       220: istore_0
       221: goto          2
       224: return
      StackMapTable: number_of_entries = 11
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ int ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 42
          locals = [ int, class java/util/Scanner, top, double, double, double ]
          stack = []
        frame_type = 20 /* same */
        frame_type = 20 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 22
          locals = [ int, class java/util/Scanner, top, top, top, double, double ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 13
          locals = [ int, class java/util/Scanner, top, top, top, top, top, top, top, double ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 59
          locals = [ int, class java/lang/String, int ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 10
          locals = [ int, top, int ]
          stack = []
        frame_type = 249 /* chop */
          offset_delta = 20
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 4 /* same */
}
