Classfile /home/shade/IdeaProjects/TestDynamic/out/artifacts/mul/mul/dynamic/testDynamic.class
  Last modified May 4, 2020; size 1849 bytes
  SHA-256 checksum d1060781fe20059b1205ae54943bc11f0aa6d4ea32621ef55147c3364b64242e
  Compiled from "testDynamic.java"
public class dynamic.testDynamic
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #25                         // dynamic/testDynamic
  super_class: #26                        // java/lang/Object
  interfaces: 0, fields: 0, methods: 2, attributes: 1
Constant pool:
    #1 = Methodref          #26.#56       // java/lang/Object."<init>":()V
    #2 = Fieldref           #57.#58       // java/lang/System.out:Ljava/io/PrintStream;
    #3 = String             #59           // Do you want to multiply [1] or add [2] two numbers? \n[1] Multiply\n[2] Add
    #4 = Methodref          #60.#61       // java/io/PrintStream.println:(Ljava/lang/String;)V
    #5 = Class              #62           // java/util/Scanner
    #6 = Fieldref           #57.#63       // java/lang/System.in:Ljava/io/InputStream;
    #7 = Methodref          #5.#64        // java/util/Scanner."<init>":(Ljava/io/InputStream;)V
    #8 = Methodref          #5.#65        // java/util/Scanner.hasNext:()Z
    #9 = Methodref          #5.#66        // java/util/Scanner.nextDouble:()D
   #10 = String             #67           // First number:
   #11 = String             #68           // Second number:
   #12 = Methodref          #69.#70       // dynamic/Mathmatics.multiplyDouble:(DD)D
   #13 = Methodref          #69.#71       // dynamic/Mathmatics.addingDouble:(DD)D
   #14 = Class              #72           // java/lang/StringBuilder
   #15 = Methodref          #14.#56       // java/lang/StringBuilder."<init>":()V
   #16 = String             #73           // The result is:
   #17 = Methodref          #14.#74       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #18 = Methodref          #14.#75       // java/lang/StringBuilder.append:(D)Ljava/lang/StringBuilder;
   #19 = Methodref          #14.#76       // java/lang/StringBuilder.toString:()Ljava/lang/String;
   #20 = String             #77           // want to go again? \n[y] yes\n[n] no
   #21 = Methodref          #5.#78        // java/util/Scanner.next:()Ljava/lang/String;
   #22 = Methodref          #79.#80       // java/lang/String.hashCode:()I
   #23 = String             #81           // y
   #24 = Methodref          #79.#82       // java/lang/String.equals:(Ljava/lang/Object;)Z
   #25 = Class              #83           // dynamic/testDynamic
   #26 = Class              #84           // java/lang/Object
   #27 = Utf8               <init>
   #28 = Utf8               ()V
   #29 = Utf8               Code
   #30 = Utf8               LineNumberTable
   #31 = Utf8               LocalVariableTable
   #32 = Utf8               this
   #33 = Utf8               Ldynamic/testDynamic;
   #34 = Utf8               main
   #35 = Utf8               ([Ljava/lang/String;)V
   #36 = Utf8               result
   #37 = Utf8               D
   #38 = Utf8               maths
   #39 = Utf8               Ldynamic/Mathmatics;
   #40 = Utf8               scan
   #41 = Utf8               Ljava/util/Scanner;
   #42 = Utf8               mulladd
   #43 = Utf8               number1
   #44 = Utf8               number2
   #45 = Utf8               args
   #46 = Utf8               [Ljava/lang/String;
   #47 = Utf8               running
   #48 = Utf8               Z
   #49 = Utf8               StackMapTable
   #50 = Class              #46           // "[Ljava/lang/String;"
   #51 = Class              #85           // dynamic/Mathmatics
   #52 = Class              #62           // java/util/Scanner
   #53 = Class              #86           // java/lang/String
   #54 = Utf8               SourceFile
   #55 = Utf8               testDynamic.java
   #56 = NameAndType        #27:#28       // "<init>":()V
   #57 = Class              #87           // java/lang/System
   #58 = NameAndType        #88:#89       // out:Ljava/io/PrintStream;
   #59 = Utf8               Do you want to multiply [1] or add [2] two numbers? \n[1] Multiply\n[2] Add
   #60 = Class              #90           // java/io/PrintStream
   #61 = NameAndType        #91:#92       // println:(Ljava/lang/String;)V
   #62 = Utf8               java/util/Scanner
   #63 = NameAndType        #93:#94       // in:Ljava/io/InputStream;
   #64 = NameAndType        #27:#95       // "<init>":(Ljava/io/InputStream;)V
   #65 = NameAndType        #96:#97       // hasNext:()Z
   #66 = NameAndType        #98:#99       // nextDouble:()D
   #67 = Utf8               First number:
   #68 = Utf8               Second number:
   #69 = Class              #85           // dynamic/Mathmatics
   #70 = NameAndType        #100:#101     // multiplyDouble:(DD)D
   #71 = NameAndType        #102:#101     // addingDouble:(DD)D
   #72 = Utf8               java/lang/StringBuilder
   #73 = Utf8               The result is:
   #74 = NameAndType        #103:#104     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #75 = NameAndType        #103:#105     // append:(D)Ljava/lang/StringBuilder;
   #76 = NameAndType        #106:#107     // toString:()Ljava/lang/String;
   #77 = Utf8               want to go again? \n[y] yes\n[n] no
   #78 = NameAndType        #108:#107     // next:()Ljava/lang/String;
   #79 = Class              #86           // java/lang/String
   #80 = NameAndType        #109:#110     // hashCode:()I
   #81 = Utf8               y
   #82 = NameAndType        #111:#112     // equals:(Ljava/lang/Object;)Z
   #83 = Utf8               dynamic/testDynamic
   #84 = Utf8               java/lang/Object
   #85 = Utf8               dynamic/Mathmatics
   #86 = Utf8               java/lang/String
   #87 = Utf8               java/lang/System
   #88 = Utf8               out
   #89 = Utf8               Ljava/io/PrintStream;
   #90 = Utf8               java/io/PrintStream
   #91 = Utf8               println
   #92 = Utf8               (Ljava/lang/String;)V
   #93 = Utf8               in
   #94 = Utf8               Ljava/io/InputStream;
   #95 = Utf8               (Ljava/io/InputStream;)V
   #96 = Utf8               hasNext
   #97 = Utf8               ()Z
   #98 = Utf8               nextDouble
   #99 = Utf8               ()D
  #100 = Utf8               multiplyDouble
  #101 = Utf8               (DD)D
  #102 = Utf8               addingDouble
  #103 = Utf8               append
  #104 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #105 = Utf8               (D)Ljava/lang/StringBuilder;
  #106 = Utf8               toString
  #107 = Utf8               ()Ljava/lang/String;
  #108 = Utf8               next
  #109 = Utf8               hashCode
  #110 = Utf8               ()I
  #111 = Utf8               equals
  #112 = Utf8               (Ljava/lang/Object;)Z
{
  public dynamic.testDynamic();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 4: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Ldynamic/testDynamic;

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=4, locals=14, args_size=1
         0: iconst_1
         1: istore_1
         2: iload_1
         3: ifeq          228
         6: aconst_null
         7: astore_2
         8: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
        11: ldc           #3                  // String Do you want to multiply [1] or add [2] two numbers? \n[1] Multiply\n[2] Add
        13: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        16: new           #5                  // class java/util/Scanner
        19: dup
        20: getstatic     #6                  // Field java/lang/System.in:Ljava/io/InputStream;
        23: invokespecial #7                  // Method java/util/Scanner."<init>":(Ljava/io/InputStream;)V
        26: astore_3
        27: dconst_0
        28: dstore        4
        30: dconst_0
        31: dstore        6
        33: dconst_0
        34: dstore        8
        36: aload_3
        37: invokevirtual #8                  // Method java/util/Scanner.hasNext:()Z
        40: ifeq          49
        43: aload_3
        44: invokevirtual #9                  // Method java/util/Scanner.nextDouble:()D
        47: dstore        4
        49: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
        52: ldc           #10                 // String First number:
        54: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        57: aload_3
        58: invokevirtual #8                  // Method java/util/Scanner.hasNext:()Z
        61: ifeq          70
        64: aload_3
        65: invokevirtual #9                  // Method java/util/Scanner.nextDouble:()D
        68: dstore        6
        70: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
        73: ldc           #11                 // String Second number:
        75: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        78: aload_3
        79: invokevirtual #8                  // Method java/util/Scanner.hasNext:()Z
        82: ifeq          91
        85: aload_3
        86: invokevirtual #9                  // Method java/util/Scanner.nextDouble:()D
        89: dstore        8
        91: dload         4
        93: dconst_1
        94: dcmpl
        95: ifne          112
        98: aload_2
        99: pop
       100: dload         6
       102: dload         8
       104: invokestatic  #12                 // Method dynamic/Mathmatics.multiplyDouble:(DD)D
       107: dstore        10
       109: goto          123
       112: aload_2
       113: pop
       114: dload         6
       116: dload         8
       118: invokestatic  #13                 // Method dynamic/Mathmatics.addingDouble:(DD)D
       121: dstore        10
       123: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
       126: new           #14                 // class java/lang/StringBuilder
       129: dup
       130: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
       133: ldc           #16                 // String The result is:
       135: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       138: dload         10
       140: invokevirtual #18                 // Method java/lang/StringBuilder.append:(D)Ljava/lang/StringBuilder;
       143: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
       146: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
       149: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
       152: ldc           #20                 // String want to go again? \n[y] yes\n[n] no
       154: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
       157: aload_3
       158: invokevirtual #21                 // Method java/util/Scanner.next:()Ljava/lang/String;
       161: astore        12
       163: iconst_m1
       164: istore        13
       166: aload         12
       168: invokevirtual #22                 // Method java/lang/String.hashCode:()I
       171: lookupswitch  { // 1
                     121: 188
                 default: 201
            }
       188: aload         12
       190: ldc           #23                 // String y
       192: invokevirtual #24                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       195: ifeq          201
       198: iconst_0
       199: istore        13
       201: iload         13
       203: lookupswitch  { // 1
                       0: 220
                 default: 223
            }
       220: goto          225
       223: iconst_0
       224: istore_1
       225: goto          2
       228: return
      LineNumberTable:
        line 6: 0
        line 7: 2
        line 8: 6
        line 9: 8
        line 10: 16
        line 11: 27
        line 12: 36
        line 13: 43
        line 15: 49
        line 16: 57
        line 17: 64
        line 20: 70
        line 22: 78
        line 23: 85
        line 25: 91
        line 26: 98
        line 28: 112
        line 30: 123
        line 32: 149
        line 33: 157
        line 35: 220
        line 37: 223
        line 39: 225
        line 41: 228
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
          109       3    10 result   D
            8     217     2 maths   Ldynamic/Mathmatics;
           27     198     3  scan   Ljava/util/Scanner;
           30     195     4 mulladd   D
           33     192     6 number1   D
           36     189     8 number2   D
          123     102    10 result   D
            0     229     0  args   [Ljava/lang/String;
            2     227     1 running   Z
      StackMapTable: number_of_entries = 12
        frame_type = 252 /* append */
          offset_delta = 2
          locals = [ int ]
        frame_type = 255 /* full_frame */
          offset_delta = 46
          locals = [ class "[Ljava/lang/String;", int, class dynamic/Mathmatics, class java/util/Scanner, double, double, double ]
          stack = []
        frame_type = 20 /* same */
        frame_type = 20 /* same */
        frame_type = 20 /* same */
        frame_type = 252 /* append */
          offset_delta = 10
          locals = [ double ]
        frame_type = 253 /* append */
          offset_delta = 64
          locals = [ class java/lang/String, int ]
        frame_type = 12 /* same */
        frame_type = 18 /* same */
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 1
          locals = [ class "[Ljava/lang/String;", int ]
          stack = []
        frame_type = 2 /* same */
}
SourceFile: "testDynamic.java"
